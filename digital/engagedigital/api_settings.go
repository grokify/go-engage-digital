/*
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package engagedigital

import (
	"context"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
)

// Linger please
var (
	_ context.Context
)

type SettingsApiService service

/*
SettingsApiService Getting all settings
This method renders all settings of your domain.  Authorization​: only users that can update settings.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return Settings
*/
func (a *SettingsApiService) GetAllSettings(ctx context.Context) (Settings, *http.Response, error) {
	var (
		localVarHttpMethod   = http.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Settings
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Settings
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
SettingsApiService Updating settings
This method updates the current domain settings.  Authorization​: only users that can update settings.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *UpdateSettingsOpts - Optional Parameters:
 * @param "ActivityPresenceThreshold" (optional.Int32) -  (in hours).
 * @param "ActivityTracking" (optional.Bool) -  ​Enable activity tracking (Boolean)
 * @param "BeginningOfWeek" (optional.String) -  (Day of week)
 * @param "CategoryTagging" (optional.Bool) -  A​ ctivate the forced categorization by source.​ (Boolean)
 * @param "ContentLanguages" (optional.String) -  (See format)
 * @param "Dashboard" (optional.Bool) -  Activate the dashboard (Boolean)
 * @param "DenyIframeIntegration" (optional.Bool) -  Prevent the DD to be embed by other websites (Boolean)
 * @param "DisablePasswordAutocomplete" (optional.Bool) -  (Boolean)
 * @param "ExpirePasswordAfter" (optional.Int32) -  password expiration delay (in seconds)
 * @param "ExpirePasswordEnabled" (optional.Bool) -  enable password expiration (Boolean)
 * @param "ExportInSeconds" (optional.Bool) -  provide durations in seconds in export (Boolean)
 * @param "FoldUselessContents" (optional.Bool) -  fold archived contents (Boolean)
 * @param "FteDuration" (optional.Int32) -  FTE data period (in hours)
 * @param "IdentityMerge" (optional.Bool) -  enable identity merge (Boolean)
 * @param "InterventionDeferRates" (optional.Interface of []int32) -  (Array of times in seconds)
 * @param "InterventionDeferThreshold" (optional.Int32) -  (in seconds)
 * @param "InterventionRates" (optional.Interface of []int32) -  (Array of times in seconds)
 * @param "Locale" (optional.String) -  locale code (String)
 * @param "MultiLang" (optional.Bool) -  activate multi language support for messages (Boolean)
 * @param "Name" (optional.String) -  Name of the Dimelo Digital (String)
 * @param "PasswordArchivableEnabled" (optional.Bool) -  prohibit reusing old passwords (Boolean)
 * @param "PasswordArchivableSize" (optional.Int32) -  number of archived passwords
 * @param "PasswordMinLength" (optional.Int32) -  minimum character length
 * @param "PasswordNonWord" (optional.Bool) -  should contain at least 1 non alphanumeric char (Boolean)
 * @param "PasswordNumbers" (optional.Bool) -  should contain at least 1 number (Boolean)
 * @param "PasswordRecoveryDisabled" (optional.Bool) -  disable password recovery by email (Boolean)
 * @param "PushEnabled" (optional.Bool) -  Enable push mode (Boolean)
 * @param "ReplyAsAnyIdentity" (optional.Bool) -  Enable reply as any identity (Boolean)
 * @param "RtlSupport" (optional.Bool) -  Enable right to left support (Boolean)
 * @param "SelfApprovalRequired" (optional.Bool) -  ​Allow authors to ask approval of their messages (Boolean)
 * @param "SessionTimeout" (optional.Int32) -  Session timeout (in minutes)
 * @param "Spellchecking" (optional.Bool) -  Enable spellchecking (Boolean)
 * @param "Style" (optional.String) -  Defines the DD’s design (String)
 * @param "ThirdPartyServicesDisabled" (optional.Bool) -  Disable third-party services (tracking...) (Boolean)
 * @param "Timezone" (optional.String) -  Use the timezone endpoint to get the timezone name (String)
 * @param "TrackJs" (optional.Bool) -  Track JS errors (Boolean)
 * @param "Type_" (optional.String) -  Can be ‘demo’, ‘production’ or ‘archived’
 * @param "UrgentTaskThreshold" (optional.Int32) -  Chat max response time (in seconds)
 * @param "UseSystemFont" (optional.Bool) -  Experimental (Boolean)
@return Settings
*/

type UpdateSettingsOpts struct {
	ActivityPresenceThreshold   optional.Int32
	ActivityTracking            optional.Bool
	BeginningOfWeek             optional.String
	CategoryTagging             optional.Bool
	ContentLanguages            optional.String
	Dashboard                   optional.Bool
	DenyIframeIntegration       optional.Bool
	DisablePasswordAutocomplete optional.Bool
	ExpirePasswordAfter         optional.Int32
	ExpirePasswordEnabled       optional.Bool
	ExportInSeconds             optional.Bool
	FoldUselessContents         optional.Bool
	FteDuration                 optional.Int32
	IdentityMerge               optional.Bool
	InterventionDeferRates      optional.Interface
	InterventionDeferThreshold  optional.Int32
	InterventionRates           optional.Interface
	Locale                      optional.String
	MultiLang                   optional.Bool
	Name                        optional.String
	PasswordArchivableEnabled   optional.Bool
	PasswordArchivableSize      optional.Int32
	PasswordMinLength           optional.Int32
	PasswordNonWord             optional.Bool
	PasswordNumbers             optional.Bool
	PasswordRecoveryDisabled    optional.Bool
	PushEnabled                 optional.Bool
	ReplyAsAnyIdentity          optional.Bool
	RtlSupport                  optional.Bool
	SelfApprovalRequired        optional.Bool
	SessionTimeout              optional.Int32
	Spellchecking               optional.Bool
	Style                       optional.String
	ThirdPartyServicesDisabled  optional.Bool
	Timezone                    optional.String
	TrackJs                     optional.Bool
	Type_                       optional.String
	UrgentTaskThreshold         optional.Int32
	UseSystemFont               optional.Bool
}

func (a *SettingsApiService) UpdateSettings(ctx context.Context, localVarOptionals *UpdateSettingsOpts) (Settings, *http.Response, error) {
	var (
		localVarHttpMethod   = http.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Settings
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ActivityPresenceThreshold.IsSet() {
		localVarQueryParams.Add("activity_presence_threshold", parameterToString(localVarOptionals.ActivityPresenceThreshold.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ActivityTracking.IsSet() {
		localVarQueryParams.Add("activity_tracking", parameterToString(localVarOptionals.ActivityTracking.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BeginningOfWeek.IsSet() {
		localVarQueryParams.Add("beginning_of_week", parameterToString(localVarOptionals.BeginningOfWeek.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CategoryTagging.IsSet() {
		localVarQueryParams.Add("category_tagging", parameterToString(localVarOptionals.CategoryTagging.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ContentLanguages.IsSet() {
		localVarQueryParams.Add("content_languages", parameterToString(localVarOptionals.ContentLanguages.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Dashboard.IsSet() {
		localVarQueryParams.Add("dashboard", parameterToString(localVarOptionals.Dashboard.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DenyIframeIntegration.IsSet() {
		localVarQueryParams.Add("deny_iframe_integration", parameterToString(localVarOptionals.DenyIframeIntegration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DisablePasswordAutocomplete.IsSet() {
		localVarQueryParams.Add("disable_password_autocomplete", parameterToString(localVarOptionals.DisablePasswordAutocomplete.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExpirePasswordAfter.IsSet() {
		localVarQueryParams.Add("expire_password_after", parameterToString(localVarOptionals.ExpirePasswordAfter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExpirePasswordEnabled.IsSet() {
		localVarQueryParams.Add("expire_password_enabled", parameterToString(localVarOptionals.ExpirePasswordEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExportInSeconds.IsSet() {
		localVarQueryParams.Add("export_in_seconds", parameterToString(localVarOptionals.ExportInSeconds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FoldUselessContents.IsSet() {
		localVarQueryParams.Add("fold_useless_contents", parameterToString(localVarOptionals.FoldUselessContents.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FteDuration.IsSet() {
		localVarQueryParams.Add("fte_duration", parameterToString(localVarOptionals.FteDuration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdentityMerge.IsSet() {
		localVarQueryParams.Add("identity_merge", parameterToString(localVarOptionals.IdentityMerge.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InterventionDeferRates.IsSet() {
		t := localVarOptionals.InterventionDeferRates.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("intervention_defer_rates[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("intervention_defer_rates[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.InterventionDeferThreshold.IsSet() {
		localVarQueryParams.Add("intervention_defer_threshold", parameterToString(localVarOptionals.InterventionDeferThreshold.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InterventionRates.IsSet() {
		t := localVarOptionals.InterventionRates.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("intervention_rates", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("intervention_rates", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Locale.IsSet() {
		localVarQueryParams.Add("locale", parameterToString(localVarOptionals.Locale.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MultiLang.IsSet() {
		localVarQueryParams.Add("multi_lang", parameterToString(localVarOptionals.MultiLang.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PasswordArchivableEnabled.IsSet() {
		localVarQueryParams.Add("password_archivable_enabled", parameterToString(localVarOptionals.PasswordArchivableEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PasswordArchivableSize.IsSet() {
		localVarQueryParams.Add("password_archivable_size", parameterToString(localVarOptionals.PasswordArchivableSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PasswordMinLength.IsSet() {
		localVarQueryParams.Add("password_min_length", parameterToString(localVarOptionals.PasswordMinLength.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PasswordNonWord.IsSet() {
		localVarQueryParams.Add("password_non_word", parameterToString(localVarOptionals.PasswordNonWord.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PasswordNumbers.IsSet() {
		localVarQueryParams.Add("password_numbers", parameterToString(localVarOptionals.PasswordNumbers.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PasswordRecoveryDisabled.IsSet() {
		localVarQueryParams.Add("password_recovery_disabled", parameterToString(localVarOptionals.PasswordRecoveryDisabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PushEnabled.IsSet() {
		localVarQueryParams.Add("push_enabled", parameterToString(localVarOptionals.PushEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReplyAsAnyIdentity.IsSet() {
		localVarQueryParams.Add("reply_as_any_identity", parameterToString(localVarOptionals.ReplyAsAnyIdentity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RtlSupport.IsSet() {
		localVarQueryParams.Add("rtl_support", parameterToString(localVarOptionals.RtlSupport.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SelfApprovalRequired.IsSet() {
		localVarQueryParams.Add("self_approval_required", parameterToString(localVarOptionals.SelfApprovalRequired.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SessionTimeout.IsSet() {
		localVarQueryParams.Add("session_timeout", parameterToString(localVarOptionals.SessionTimeout.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Spellchecking.IsSet() {
		localVarQueryParams.Add("spellchecking", parameterToString(localVarOptionals.Spellchecking.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Style.IsSet() {
		localVarQueryParams.Add("style", parameterToString(localVarOptionals.Style.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ThirdPartyServicesDisabled.IsSet() {
		localVarQueryParams.Add("third_party_services_disabled", parameterToString(localVarOptionals.ThirdPartyServicesDisabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Timezone.IsSet() {
		localVarQueryParams.Add("timezone", parameterToString(localVarOptionals.Timezone.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TrackJs.IsSet() {
		localVarQueryParams.Add("track_js", parameterToString(localVarOptionals.TrackJs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UrgentTaskThreshold.IsSet() {
		localVarQueryParams.Add("urgent_task_threshold", parameterToString(localVarOptionals.UrgentTaskThreshold.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseSystemFont.IsSet() {
		localVarQueryParams.Add("use_system_font", parameterToString(localVarOptionals.UseSystemFont.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Settings
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
