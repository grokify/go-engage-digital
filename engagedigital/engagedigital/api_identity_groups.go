/*
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package engagedigital

import (
	"context"
	"fmt"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type IdentityGroupsApiService service

/*
IdentityGroupsApiService Getting all identity groups
This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetAllIdentityGroupsOpts - Optional Parameters:
 * @param "Firstname" (optional.String) -  To filter groups on given firstname.
 * @param "Lastname" (optional.String) -  To filter groups on given lastname.
 * @param "Email" (optional.String) -  To filter groups that have given email.
 * @param "Uuid" (optional.String) -  To filter groups that have given uuid.
 * @param "Sort" (optional.String) -  To change the criteria chosen to sort the identities. The value can be “created_at” or “updated_at”.
 * @param "Offset" (optional.Int32) -  The record index to start. Default value is 0.
 * @param "Limit" (optional.Int32) -  The max number of records to return. Default value is 30, max value is 150.
@return GetAllIdentityGroupsResponse
*/

type GetAllIdentityGroupsOpts struct {
	Firstname optional.String
	Lastname  optional.String
	Email     optional.String
	Uuid      optional.String
	Sort      optional.String
	Offset    optional.Int32
	Limit     optional.Int32
}

func (a *IdentityGroupsApiService) GetAllIdentityGroups(ctx context.Context, localVarOptionals *GetAllIdentityGroupsOpts) (GetAllIdentityGroupsResponse, *http.Response, error) {
	var (
		localVarHttpMethod   = http.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetAllIdentityGroupsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/identity_groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Firstname.IsSet() {
		localVarQueryParams.Add("firstname", parameterToString(localVarOptionals.Firstname.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lastname.IsSet() {
		localVarQueryParams.Add("lastname", parameterToString(localVarOptionals.Lastname.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Email.IsSet() {
		localVarQueryParams.Add("email", parameterToString(localVarOptionals.Email.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Uuid.IsSet() {
		localVarQueryParams.Add("uuid", parameterToString(localVarOptionals.Uuid.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v GetAllIdentityGroupsResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
IdentityGroupsApiService Getting an identity group from its id
This method renders an identity group from given id.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param identityGroupId
@return IdentityGroup
*/
func (a *IdentityGroupsApiService) GetIdentityGroup(ctx context.Context, identityGroupId string) (IdentityGroup, *http.Response, error) {
	var (
		localVarHttpMethod   = http.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IdentityGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/identity_groups/{identityGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"identityGroupId"+"}", fmt.Sprintf("%v", identityGroupId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v IdentityGroup
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
IdentityGroupsApiService Updating an identity group
This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param identityGroupId
 * @param optional nil or *UpdateIdentityGroupOpts - Optional Parameters:
 * @param "Company" (optional.String) -  Identity company.
 * @param "CustomFieldValuesCustomFieldKey" (optional.String) -  Identity custom field with key « custom_field_key ». It
 * @param "Emails" (optional.Interface of []string) -  Identity emails (multiple).
 * @param "Firstname" (optional.String) -  Identity firstname.
 * @param "Gender" (optional.String) -  Identity’s gender. It can be \"man\", \"woman\" or empty.
 * @param "HomePhones" (optional.Interface of []string) -  Identity home phones (mutiple).
 * @param "Lastname" (optional.String) -  Identity lastname.
 * @param "MobilePhones" (optional.Interface of []string) -  Identity mobile phones (multiple).
 * @param "Notes" (optional.String) -  Identity notes.
 * @param "TagIds" (optional.Interface of []string) -  Identity tag ids (multiple).
@return IdentityGroup
*/

type UpdateIdentityGroupOpts struct {
	Company                         optional.String
	CustomFieldValuesCustomFieldKey optional.String
	Emails                          optional.Interface
	Firstname                       optional.String
	Gender                          optional.String
	HomePhones                      optional.Interface
	Lastname                        optional.String
	MobilePhones                    optional.Interface
	Notes                           optional.String
	TagIds                          optional.Interface
}

func (a *IdentityGroupsApiService) UpdateIdentityGroup(ctx context.Context, identityGroupId string, localVarOptionals *UpdateIdentityGroupOpts) (IdentityGroup, *http.Response, error) {
	var (
		localVarHttpMethod   = http.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  IdentityGroup
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/identity_groups/{identityGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"identityGroupId"+"}", fmt.Sprintf("%v", identityGroupId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Company.IsSet() {
		localVarQueryParams.Add("company", parameterToString(localVarOptionals.Company.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CustomFieldValuesCustomFieldKey.IsSet() {
		localVarQueryParams.Add("custom_field_values[custom_field_key]", parameterToString(localVarOptionals.CustomFieldValuesCustomFieldKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Emails.IsSet() {
		t := localVarOptionals.Emails.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("emails", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("emails", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Firstname.IsSet() {
		localVarQueryParams.Add("firstname", parameterToString(localVarOptionals.Firstname.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Gender.IsSet() {
		localVarQueryParams.Add("gender", parameterToString(localVarOptionals.Gender.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HomePhones.IsSet() {
		t := localVarOptionals.HomePhones.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("home_phones", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("home_phones", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Lastname.IsSet() {
		localVarQueryParams.Add("lastname", parameterToString(localVarOptionals.Lastname.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MobilePhones.IsSet() {
		t := localVarOptionals.MobilePhones.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mobile_phones", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mobile_phones", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Notes.IsSet() {
		localVarQueryParams.Add("notes", parameterToString(localVarOptionals.Notes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TagIds.IsSet() {
		t := localVarOptionals.TagIds.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag_ids", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag_ids", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v IdentityGroup
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
