/*
 * Engage Digital API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package engagedigital

import (
	"context"
	"fmt"
	"github.com/antihax/optional"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type RolesApiService service

/*
RolesApiService Creating a role
This method creates a new role. In case of success it renders the created role, otherwise, it renders an error (422 HTTP code).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param label
 * @param optional nil or *CreateRoleOpts - Optional Parameters:
 * @param "AccessHelpCenter" (optional.Bool) -
 * @param "AccessPreviousMessages" (optional.Bool) -
 * @param "AccessPullMode" (optional.Bool) -
 * @param "AdminStampAnswer" (optional.Bool) -
 * @param "ApproveContent" (optional.Bool) -
 * @param "AssignIntervention" (optional.Bool) -
 * @param "AuthorBlockContent" (optional.Bool) -
 * @param "CloseContentThread" (optional.Bool) -
 * @param "CreateAndDestroyExtension" (optional.Bool) -
 * @param "CreateCommunity" (optional.Bool) -
 * @param "CreateContentSource" (optional.Bool) -
 * @param "CreateUser" (optional.Bool) -
 * @param "DelayExportContent" (optional.Bool) -
 * @param "DeleteContentThread" (optional.Bool) -
 * @param "ImpersonateUser" (optional.Bool) -
 * @param "InviteUser" (optional.Bool) -
 * @param "ManageApiAccessTokens" (optional.Bool) -
 * @param "ManageAppSdkApplications" (optional.Bool) -
 * @param "ManageAutomaticExportsTasks" (optional.Bool) -  permission only available with the corresponding extension enabled
 * @param "ManageCategories" (optional.Bool) -
 * @param "ManageChat" (optional.Bool) -
 * @param "ManageCustomFields" (optional.Bool) -
 * @param "ManageCustomNotifications" (optional.Bool) -
 * @param "ManageEmailsTemplates" (optional.Bool) -
 * @param "ManageFolders" (optional.Bool) -
 * @param "ManageIce" (optional.Bool) -
 * @param "ManageIdentities" (optional.Bool) -
 * @param "ManageOwnNotifications" (optional.Bool) -
 * @param "ManageReplyAssistant" (optional.Bool) -  permission only available with the corresponding extension enabled
 * @param "ManageRoles" (optional.Bool) -
 * @param "ManageRulesEngineRules" (optional.Bool) -  permission only available with the corresponding extension enabled
 * @param "ManageSurveys" (optional.Bool) -  permission only available with the corresponding extension enabled
 * @param "ManageTags" (optional.Bool) -
 * @param "ManageTeams" (optional.Bool) -
 * @param "ManageTopologies" (optional.Bool) -
 * @param "ManageUsersOfMyTeams" (optional.Bool) -
 * @param "MonitorTasks" (optional.Bool) -
 * @param "MonitorTeamTasks" (optional.Bool) -
 * @param "MuteContent" (optional.Bool) -
 * @param "OpenContentThread" (optional.Bool) -
 * @param "PublishContent" (optional.Bool) -
 * @param "ReadCommunity" (optional.Bool) -
 * @param "ReadContentSource" (optional.Bool) -
 * @param "ReadEvent" (optional.Bool) -
 * @param "ReadExport" (optional.Bool) -
 * @param "ReadIdentity" (optional.Bool) -
 * @param "ReadOwnStats" (optional.Bool) -
 * @param "ReadPresence" (optional.Bool) -
 * @param "ReadStats" (optional.Bool) -
 * @param "ReadSurveys" (optional.Bool) -  permission only available with the corresponding extension enabled
 * @param "ReadUser" (optional.Bool) -
 * @param "ReceiveTasks" (optional.Bool) -
 * @param "ReplyWithAssistant" (optional.Bool) -  permission only available with the corresponding extension enabled
 * @param "SearchContents" (optional.Bool) -
 * @param "SearchEvent" (optional.Bool) -
 * @param "UpdateCommunity" (optional.Bool) -
 * @param "UpdateContentSource" (optional.Bool) -
 * @param "UpdateExtension" (optional.Bool) -
 * @param "UpdateIdentity" (optional.Bool) -
 * @param "UpdateIntervention" (optional.Bool) -
 * @param "UpdateOwnIntervention" (optional.Bool) -
 * @param "UpdateSettings" (optional.Bool) -
 * @param "UpdateTimeSheet" (optional.Bool) -
 * @param "UpdateUser" (optional.Bool) -
 * @param "UseEmoji" (optional.Bool) -
@return Role
*/

type CreateRoleOpts struct {
	AccessHelpCenter            optional.Bool
	AccessPreviousMessages      optional.Bool
	AccessPullMode              optional.Bool
	AdminStampAnswer            optional.Bool
	ApproveContent              optional.Bool
	AssignIntervention          optional.Bool
	AuthorBlockContent          optional.Bool
	CloseContentThread          optional.Bool
	CreateAndDestroyExtension   optional.Bool
	CreateCommunity             optional.Bool
	CreateContentSource         optional.Bool
	CreateUser                  optional.Bool
	DelayExportContent          optional.Bool
	DeleteContentThread         optional.Bool
	ImpersonateUser             optional.Bool
	InviteUser                  optional.Bool
	ManageApiAccessTokens       optional.Bool
	ManageAppSdkApplications    optional.Bool
	ManageAutomaticExportsTasks optional.Bool
	ManageCategories            optional.Bool
	ManageChat                  optional.Bool
	ManageCustomFields          optional.Bool
	ManageCustomNotifications   optional.Bool
	ManageEmailsTemplates       optional.Bool
	ManageFolders               optional.Bool
	ManageIce                   optional.Bool
	ManageIdentities            optional.Bool
	ManageOwnNotifications      optional.Bool
	ManageReplyAssistant        optional.Bool
	ManageRoles                 optional.Bool
	ManageRulesEngineRules      optional.Bool
	ManageSurveys               optional.Bool
	ManageTags                  optional.Bool
	ManageTeams                 optional.Bool
	ManageTopologies            optional.Bool
	ManageUsersOfMyTeams        optional.Bool
	MonitorTasks                optional.Bool
	MonitorTeamTasks            optional.Bool
	MuteContent                 optional.Bool
	OpenContentThread           optional.Bool
	PublishContent              optional.Bool
	ReadCommunity               optional.Bool
	ReadContentSource           optional.Bool
	ReadEvent                   optional.Bool
	ReadExport                  optional.Bool
	ReadIdentity                optional.Bool
	ReadOwnStats                optional.Bool
	ReadPresence                optional.Bool
	ReadStats                   optional.Bool
	ReadSurveys                 optional.Bool
	ReadUser                    optional.Bool
	ReceiveTasks                optional.Bool
	ReplyWithAssistant          optional.Bool
	SearchContents              optional.Bool
	SearchEvent                 optional.Bool
	UpdateCommunity             optional.Bool
	UpdateContentSource         optional.Bool
	UpdateExtension             optional.Bool
	UpdateIdentity              optional.Bool
	UpdateIntervention          optional.Bool
	UpdateOwnIntervention       optional.Bool
	UpdateSettings              optional.Bool
	UpdateTimeSheet             optional.Bool
	UpdateUser                  optional.Bool
	UseEmoji                    optional.Bool
}

func (a *RolesApiService) CreateRole(ctx context.Context, label string, localVarOptionals *CreateRoleOpts) (Role, *http.Response, error) {
	var (
		localVarHttpMethod   = http.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Role
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/roles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("label", parameterToString(label, ""))
	if localVarOptionals != nil && localVarOptionals.AccessHelpCenter.IsSet() {
		localVarQueryParams.Add("access_help_center", parameterToString(localVarOptionals.AccessHelpCenter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessPreviousMessages.IsSet() {
		localVarQueryParams.Add("access_previous_messages", parameterToString(localVarOptionals.AccessPreviousMessages.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessPullMode.IsSet() {
		localVarQueryParams.Add("access_pull_mode", parameterToString(localVarOptionals.AccessPullMode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AdminStampAnswer.IsSet() {
		localVarQueryParams.Add("admin_stamp_answer", parameterToString(localVarOptionals.AdminStampAnswer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApproveContent.IsSet() {
		localVarQueryParams.Add("approve_content", parameterToString(localVarOptionals.ApproveContent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AssignIntervention.IsSet() {
		localVarQueryParams.Add("assign_intervention", parameterToString(localVarOptionals.AssignIntervention.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AuthorBlockContent.IsSet() {
		localVarQueryParams.Add("author_block_content", parameterToString(localVarOptionals.AuthorBlockContent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CloseContentThread.IsSet() {
		localVarQueryParams.Add("close_content_thread", parameterToString(localVarOptionals.CloseContentThread.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreateAndDestroyExtension.IsSet() {
		localVarQueryParams.Add("create_and_destroy_extension", parameterToString(localVarOptionals.CreateAndDestroyExtension.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreateCommunity.IsSet() {
		localVarQueryParams.Add("create_community", parameterToString(localVarOptionals.CreateCommunity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreateContentSource.IsSet() {
		localVarQueryParams.Add("create_content_source", parameterToString(localVarOptionals.CreateContentSource.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreateUser.IsSet() {
		localVarQueryParams.Add("create_user", parameterToString(localVarOptionals.CreateUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DelayExportContent.IsSet() {
		localVarQueryParams.Add("delay_export_content", parameterToString(localVarOptionals.DelayExportContent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DeleteContentThread.IsSet() {
		localVarQueryParams.Add("delete_content_thread", parameterToString(localVarOptionals.DeleteContentThread.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ImpersonateUser.IsSet() {
		localVarQueryParams.Add("impersonate_user", parameterToString(localVarOptionals.ImpersonateUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InviteUser.IsSet() {
		localVarQueryParams.Add("invite_user", parameterToString(localVarOptionals.InviteUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageApiAccessTokens.IsSet() {
		localVarQueryParams.Add("manage_api_access_tokens", parameterToString(localVarOptionals.ManageApiAccessTokens.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageAppSdkApplications.IsSet() {
		localVarQueryParams.Add("manage_app_sdk_applications", parameterToString(localVarOptionals.ManageAppSdkApplications.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageAutomaticExportsTasks.IsSet() {
		localVarQueryParams.Add("manage_automatic_exports_tasks", parameterToString(localVarOptionals.ManageAutomaticExportsTasks.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageCategories.IsSet() {
		localVarQueryParams.Add("manage_categories", parameterToString(localVarOptionals.ManageCategories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageChat.IsSet() {
		localVarQueryParams.Add("manage_chat", parameterToString(localVarOptionals.ManageChat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageCustomFields.IsSet() {
		localVarQueryParams.Add("manage_custom_fields", parameterToString(localVarOptionals.ManageCustomFields.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageCustomNotifications.IsSet() {
		localVarQueryParams.Add("manage_custom_notifications", parameterToString(localVarOptionals.ManageCustomNotifications.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageEmailsTemplates.IsSet() {
		localVarQueryParams.Add("manage_emails_templates", parameterToString(localVarOptionals.ManageEmailsTemplates.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageFolders.IsSet() {
		localVarQueryParams.Add("manage_folders", parameterToString(localVarOptionals.ManageFolders.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageIce.IsSet() {
		localVarQueryParams.Add("manage_ice", parameterToString(localVarOptionals.ManageIce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageIdentities.IsSet() {
		localVarQueryParams.Add("manage_identities", parameterToString(localVarOptionals.ManageIdentities.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageOwnNotifications.IsSet() {
		localVarQueryParams.Add("manage_own_notifications", parameterToString(localVarOptionals.ManageOwnNotifications.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageReplyAssistant.IsSet() {
		localVarQueryParams.Add("manage_reply_assistant", parameterToString(localVarOptionals.ManageReplyAssistant.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageRoles.IsSet() {
		localVarQueryParams.Add("manage_roles", parameterToString(localVarOptionals.ManageRoles.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageRulesEngineRules.IsSet() {
		localVarQueryParams.Add("manage_rules_engine_rules", parameterToString(localVarOptionals.ManageRulesEngineRules.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageSurveys.IsSet() {
		localVarQueryParams.Add("manage_surveys", parameterToString(localVarOptionals.ManageSurveys.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageTags.IsSet() {
		localVarQueryParams.Add("manage_tags", parameterToString(localVarOptionals.ManageTags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageTeams.IsSet() {
		localVarQueryParams.Add("manage_teams", parameterToString(localVarOptionals.ManageTeams.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageTopologies.IsSet() {
		localVarQueryParams.Add("manage_topologies", parameterToString(localVarOptionals.ManageTopologies.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageUsersOfMyTeams.IsSet() {
		localVarQueryParams.Add("manage_users_of_my_teams", parameterToString(localVarOptionals.ManageUsersOfMyTeams.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MonitorTasks.IsSet() {
		localVarQueryParams.Add("monitor_tasks", parameterToString(localVarOptionals.MonitorTasks.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MonitorTeamTasks.IsSet() {
		localVarQueryParams.Add("monitor_team_tasks", parameterToString(localVarOptionals.MonitorTeamTasks.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MuteContent.IsSet() {
		localVarQueryParams.Add("mute_content", parameterToString(localVarOptionals.MuteContent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OpenContentThread.IsSet() {
		localVarQueryParams.Add("open_content_thread", parameterToString(localVarOptionals.OpenContentThread.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublishContent.IsSet() {
		localVarQueryParams.Add("publish_content", parameterToString(localVarOptionals.PublishContent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadCommunity.IsSet() {
		localVarQueryParams.Add("read_community", parameterToString(localVarOptionals.ReadCommunity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadContentSource.IsSet() {
		localVarQueryParams.Add("read_content_source", parameterToString(localVarOptionals.ReadContentSource.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadEvent.IsSet() {
		localVarQueryParams.Add("read_event", parameterToString(localVarOptionals.ReadEvent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadExport.IsSet() {
		localVarQueryParams.Add("read_export", parameterToString(localVarOptionals.ReadExport.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadIdentity.IsSet() {
		localVarQueryParams.Add("read_identity", parameterToString(localVarOptionals.ReadIdentity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadOwnStats.IsSet() {
		localVarQueryParams.Add("read_own_stats", parameterToString(localVarOptionals.ReadOwnStats.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadPresence.IsSet() {
		localVarQueryParams.Add("read_presence", parameterToString(localVarOptionals.ReadPresence.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadStats.IsSet() {
		localVarQueryParams.Add("read_stats", parameterToString(localVarOptionals.ReadStats.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadSurveys.IsSet() {
		localVarQueryParams.Add("read_surveys", parameterToString(localVarOptionals.ReadSurveys.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadUser.IsSet() {
		localVarQueryParams.Add("read_user", parameterToString(localVarOptionals.ReadUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReceiveTasks.IsSet() {
		localVarQueryParams.Add("receive_tasks", parameterToString(localVarOptionals.ReceiveTasks.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReplyWithAssistant.IsSet() {
		localVarQueryParams.Add("reply_with_assistant", parameterToString(localVarOptionals.ReplyWithAssistant.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchContents.IsSet() {
		localVarQueryParams.Add("search_contents", parameterToString(localVarOptionals.SearchContents.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchEvent.IsSet() {
		localVarQueryParams.Add("search_event", parameterToString(localVarOptionals.SearchEvent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateCommunity.IsSet() {
		localVarQueryParams.Add("update_community", parameterToString(localVarOptionals.UpdateCommunity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateContentSource.IsSet() {
		localVarQueryParams.Add("update_content_source", parameterToString(localVarOptionals.UpdateContentSource.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateExtension.IsSet() {
		localVarQueryParams.Add("update_extension", parameterToString(localVarOptionals.UpdateExtension.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateIdentity.IsSet() {
		localVarQueryParams.Add("update_identity", parameterToString(localVarOptionals.UpdateIdentity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateIntervention.IsSet() {
		localVarQueryParams.Add("update_intervention", parameterToString(localVarOptionals.UpdateIntervention.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateOwnIntervention.IsSet() {
		localVarQueryParams.Add("update_own_intervention", parameterToString(localVarOptionals.UpdateOwnIntervention.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateSettings.IsSet() {
		localVarQueryParams.Add("update_settings", parameterToString(localVarOptionals.UpdateSettings.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateTimeSheet.IsSet() {
		localVarQueryParams.Add("update_time_sheet", parameterToString(localVarOptionals.UpdateTimeSheet.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateUser.IsSet() {
		localVarQueryParams.Add("update_user", parameterToString(localVarOptionals.UpdateUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseEmoji.IsSet() {
		localVarQueryParams.Add("use_emoji", parameterToString(localVarOptionals.UseEmoji.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Role
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RolesApiService Getting all roles
This method renders roles ordered by creation date (ascending).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetAllRolesOpts - Optional Parameters:
 * @param "Offset" (optional.Int32) -  The record index to start. Default value is 0.
 * @param "Limit" (optional.Int32) -  The max number of records to return. Default value is 30, max value is 150.
@return GetAllRolesResponse
*/

type GetAllRolesOpts struct {
	Offset optional.Int32
	Limit  optional.Int32
}

func (a *RolesApiService) GetAllRoles(ctx context.Context, localVarOptionals *GetAllRolesOpts) (GetAllRolesResponse, *http.Response, error) {
	var (
		localVarHttpMethod   = http.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetAllRolesResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/roles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v GetAllRolesResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RolesApiService Getting a role from its id
This method renders a role from given id.  Authorization​: only users that can manage roles.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param roleId
@return Role
*/
func (a *RolesApiService) GetRole(ctx context.Context, roleId string) (Role, *http.Response, error) {
	var (
		localVarHttpMethod   = http.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Role
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/roles/{roleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"roleId"+"}", fmt.Sprintf("%v", roleId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Role
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
RolesApiService Updating a role
This method updates an existing role from given attributes and renders it in case of success.  Authorization​: A user can’t update roles with more permissions than himself and can’t give a role a permission he doesn’t have.  Any permission updated with a user that does not have this permission will be ignored (The update is done, just not the unallowed permission)
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param roleId
 * @param optional nil or *UpdateRoleOpts - Optional Parameters:
 * @param "AccessHelpCenter" (optional.Bool) -
 * @param "AccessPreviousMessages" (optional.Bool) -
 * @param "AccessPullMode" (optional.Bool) -
 * @param "AdminStampAnswer" (optional.Bool) -
 * @param "ApproveContent" (optional.Bool) -
 * @param "AssignIntervention" (optional.Bool) -
 * @param "AuthorBlockContent" (optional.Bool) -
 * @param "CloseContentThread" (optional.Bool) -
 * @param "CreateAndDestroyExtension" (optional.Bool) -
 * @param "CreateCommunity" (optional.Bool) -
 * @param "CreateContentSource" (optional.Bool) -
 * @param "CreateUser" (optional.Bool) -
 * @param "DelayExportContent" (optional.Bool) -
 * @param "DeleteContentThread" (optional.Bool) -
 * @param "ImpersonateUser" (optional.Bool) -
 * @param "InviteUser" (optional.Bool) -
 * @param "ManageApiAccessTokens" (optional.Bool) -
 * @param "ManageAppSdkApplications" (optional.Bool) -
 * @param "ManageAutomaticExportsTasks" (optional.Bool) -  permission only available with the corresponding extension enabled
 * @param "ManageCategories" (optional.Bool) -
 * @param "ManageChat" (optional.Bool) -
 * @param "ManageCustomFields" (optional.Bool) -
 * @param "ManageCustomNotifications" (optional.Bool) -
 * @param "ManageEmailsTemplates" (optional.Bool) -
 * @param "ManageFolders" (optional.Bool) -
 * @param "ManageIce" (optional.Bool) -
 * @param "ManageIdentities" (optional.Bool) -
 * @param "ManageOwnNotifications" (optional.Bool) -
 * @param "ManageReplyAssistant" (optional.Bool) -  permission only available with the corresponding extension enabled
 * @param "ManageRoles" (optional.Bool) -
 * @param "ManageRulesEngineRules" (optional.Bool) -  permission only available with the corresponding extension enabled
 * @param "ManageSurveys" (optional.Bool) -  permission only available with the corresponding extension enabled
 * @param "ManageTags" (optional.Bool) -
 * @param "ManageTeams" (optional.Bool) -
 * @param "ManageTopologies" (optional.Bool) -
 * @param "ManageUsersOfMyTeams" (optional.Bool) -
 * @param "MonitorTasks" (optional.Bool) -
 * @param "MonitorTeamTasks" (optional.Bool) -
 * @param "MuteContent" (optional.Bool) -
 * @param "OpenContentThread" (optional.Bool) -
 * @param "PublishContent" (optional.Bool) -
 * @param "ReadCommunity" (optional.Bool) -
 * @param "ReadContentSource" (optional.Bool) -
 * @param "ReadEvent" (optional.Bool) -
 * @param "ReadExport" (optional.Bool) -
 * @param "ReadIdentity" (optional.Bool) -
 * @param "ReadOwnStats" (optional.Bool) -
 * @param "ReadPresence" (optional.Bool) -
 * @param "ReadStats" (optional.Bool) -
 * @param "ReadSurveys" (optional.Bool) -  permission only available with the corresponding extension enabled
 * @param "ReadUser" (optional.Bool) -
 * @param "ReceiveTasks" (optional.Bool) -
 * @param "ReplyWithAssistant" (optional.Bool) -  permission only available with the corresponding extension enabled
 * @param "SearchContents" (optional.Bool) -
 * @param "SearchEvent" (optional.Bool) -
 * @param "UpdateCommunity" (optional.Bool) -
 * @param "UpdateContentSource" (optional.Bool) -
 * @param "UpdateExtension" (optional.Bool) -
 * @param "UpdateIdentity" (optional.Bool) -
 * @param "UpdateIntervention" (optional.Bool) -
 * @param "UpdateOwnIntervention" (optional.Bool) -
 * @param "UpdateSettings" (optional.Bool) -
 * @param "UpdateTimeSheet" (optional.Bool) -
 * @param "UpdateUser" (optional.Bool) -
 * @param "UseEmoji" (optional.Bool) -
@return Role
*/

type UpdateRoleOpts struct {
	AccessHelpCenter            optional.Bool
	AccessPreviousMessages      optional.Bool
	AccessPullMode              optional.Bool
	AdminStampAnswer            optional.Bool
	ApproveContent              optional.Bool
	AssignIntervention          optional.Bool
	AuthorBlockContent          optional.Bool
	CloseContentThread          optional.Bool
	CreateAndDestroyExtension   optional.Bool
	CreateCommunity             optional.Bool
	CreateContentSource         optional.Bool
	CreateUser                  optional.Bool
	DelayExportContent          optional.Bool
	DeleteContentThread         optional.Bool
	ImpersonateUser             optional.Bool
	InviteUser                  optional.Bool
	ManageApiAccessTokens       optional.Bool
	ManageAppSdkApplications    optional.Bool
	ManageAutomaticExportsTasks optional.Bool
	ManageCategories            optional.Bool
	ManageChat                  optional.Bool
	ManageCustomFields          optional.Bool
	ManageCustomNotifications   optional.Bool
	ManageEmailsTemplates       optional.Bool
	ManageFolders               optional.Bool
	ManageIce                   optional.Bool
	ManageIdentities            optional.Bool
	ManageOwnNotifications      optional.Bool
	ManageReplyAssistant        optional.Bool
	ManageRoles                 optional.Bool
	ManageRulesEngineRules      optional.Bool
	ManageSurveys               optional.Bool
	ManageTags                  optional.Bool
	ManageTeams                 optional.Bool
	ManageTopologies            optional.Bool
	ManageUsersOfMyTeams        optional.Bool
	MonitorTasks                optional.Bool
	MonitorTeamTasks            optional.Bool
	MuteContent                 optional.Bool
	OpenContentThread           optional.Bool
	PublishContent              optional.Bool
	ReadCommunity               optional.Bool
	ReadContentSource           optional.Bool
	ReadEvent                   optional.Bool
	ReadExport                  optional.Bool
	ReadIdentity                optional.Bool
	ReadOwnStats                optional.Bool
	ReadPresence                optional.Bool
	ReadStats                   optional.Bool
	ReadSurveys                 optional.Bool
	ReadUser                    optional.Bool
	ReceiveTasks                optional.Bool
	ReplyWithAssistant          optional.Bool
	SearchContents              optional.Bool
	SearchEvent                 optional.Bool
	UpdateCommunity             optional.Bool
	UpdateContentSource         optional.Bool
	UpdateExtension             optional.Bool
	UpdateIdentity              optional.Bool
	UpdateIntervention          optional.Bool
	UpdateOwnIntervention       optional.Bool
	UpdateSettings              optional.Bool
	UpdateTimeSheet             optional.Bool
	UpdateUser                  optional.Bool
	UseEmoji                    optional.Bool
}

func (a *RolesApiService) UpdateRole(ctx context.Context, roleId string, localVarOptionals *UpdateRoleOpts) (Role, *http.Response, error) {
	var (
		localVarHttpMethod   = http.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Role
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/roles/{roleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"roleId"+"}", fmt.Sprintf("%v", roleId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.AccessHelpCenter.IsSet() {
		localVarQueryParams.Add("access_help_center", parameterToString(localVarOptionals.AccessHelpCenter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessPreviousMessages.IsSet() {
		localVarQueryParams.Add("access_previous_messages", parameterToString(localVarOptionals.AccessPreviousMessages.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessPullMode.IsSet() {
		localVarQueryParams.Add("access_pull_mode", parameterToString(localVarOptionals.AccessPullMode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AdminStampAnswer.IsSet() {
		localVarQueryParams.Add("admin_stamp_answer", parameterToString(localVarOptionals.AdminStampAnswer.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ApproveContent.IsSet() {
		localVarQueryParams.Add("approve_content", parameterToString(localVarOptionals.ApproveContent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AssignIntervention.IsSet() {
		localVarQueryParams.Add("assign_intervention", parameterToString(localVarOptionals.AssignIntervention.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AuthorBlockContent.IsSet() {
		localVarQueryParams.Add("author_block_content", parameterToString(localVarOptionals.AuthorBlockContent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CloseContentThread.IsSet() {
		localVarQueryParams.Add("close_content_thread", parameterToString(localVarOptionals.CloseContentThread.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreateAndDestroyExtension.IsSet() {
		localVarQueryParams.Add("create_and_destroy_extension", parameterToString(localVarOptionals.CreateAndDestroyExtension.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreateCommunity.IsSet() {
		localVarQueryParams.Add("create_community", parameterToString(localVarOptionals.CreateCommunity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreateContentSource.IsSet() {
		localVarQueryParams.Add("create_content_source", parameterToString(localVarOptionals.CreateContentSource.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreateUser.IsSet() {
		localVarQueryParams.Add("create_user", parameterToString(localVarOptionals.CreateUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DelayExportContent.IsSet() {
		localVarQueryParams.Add("delay_export_content", parameterToString(localVarOptionals.DelayExportContent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DeleteContentThread.IsSet() {
		localVarQueryParams.Add("delete_content_thread", parameterToString(localVarOptionals.DeleteContentThread.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ImpersonateUser.IsSet() {
		localVarQueryParams.Add("impersonate_user", parameterToString(localVarOptionals.ImpersonateUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InviteUser.IsSet() {
		localVarQueryParams.Add("invite_user", parameterToString(localVarOptionals.InviteUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageApiAccessTokens.IsSet() {
		localVarQueryParams.Add("manage_api_access_tokens", parameterToString(localVarOptionals.ManageApiAccessTokens.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageAppSdkApplications.IsSet() {
		localVarQueryParams.Add("manage_app_sdk_applications", parameterToString(localVarOptionals.ManageAppSdkApplications.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageAutomaticExportsTasks.IsSet() {
		localVarQueryParams.Add("manage_automatic_exports_tasks", parameterToString(localVarOptionals.ManageAutomaticExportsTasks.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageCategories.IsSet() {
		localVarQueryParams.Add("manage_categories", parameterToString(localVarOptionals.ManageCategories.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageChat.IsSet() {
		localVarQueryParams.Add("manage_chat", parameterToString(localVarOptionals.ManageChat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageCustomFields.IsSet() {
		localVarQueryParams.Add("manage_custom_fields", parameterToString(localVarOptionals.ManageCustomFields.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageCustomNotifications.IsSet() {
		localVarQueryParams.Add("manage_custom_notifications", parameterToString(localVarOptionals.ManageCustomNotifications.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageEmailsTemplates.IsSet() {
		localVarQueryParams.Add("manage_emails_templates", parameterToString(localVarOptionals.ManageEmailsTemplates.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageFolders.IsSet() {
		localVarQueryParams.Add("manage_folders", parameterToString(localVarOptionals.ManageFolders.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageIce.IsSet() {
		localVarQueryParams.Add("manage_ice", parameterToString(localVarOptionals.ManageIce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageIdentities.IsSet() {
		localVarQueryParams.Add("manage_identities", parameterToString(localVarOptionals.ManageIdentities.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageOwnNotifications.IsSet() {
		localVarQueryParams.Add("manage_own_notifications", parameterToString(localVarOptionals.ManageOwnNotifications.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageReplyAssistant.IsSet() {
		localVarQueryParams.Add("manage_reply_assistant", parameterToString(localVarOptionals.ManageReplyAssistant.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageRoles.IsSet() {
		localVarQueryParams.Add("manage_roles", parameterToString(localVarOptionals.ManageRoles.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageRulesEngineRules.IsSet() {
		localVarQueryParams.Add("manage_rules_engine_rules", parameterToString(localVarOptionals.ManageRulesEngineRules.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageSurveys.IsSet() {
		localVarQueryParams.Add("manage_surveys", parameterToString(localVarOptionals.ManageSurveys.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageTags.IsSet() {
		localVarQueryParams.Add("manage_tags", parameterToString(localVarOptionals.ManageTags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageTeams.IsSet() {
		localVarQueryParams.Add("manage_teams", parameterToString(localVarOptionals.ManageTeams.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageTopologies.IsSet() {
		localVarQueryParams.Add("manage_topologies", parameterToString(localVarOptionals.ManageTopologies.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageUsersOfMyTeams.IsSet() {
		localVarQueryParams.Add("manage_users_of_my_teams", parameterToString(localVarOptionals.ManageUsersOfMyTeams.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MonitorTasks.IsSet() {
		localVarQueryParams.Add("monitor_tasks", parameterToString(localVarOptionals.MonitorTasks.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MonitorTeamTasks.IsSet() {
		localVarQueryParams.Add("monitor_team_tasks", parameterToString(localVarOptionals.MonitorTeamTasks.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MuteContent.IsSet() {
		localVarQueryParams.Add("mute_content", parameterToString(localVarOptionals.MuteContent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OpenContentThread.IsSet() {
		localVarQueryParams.Add("open_content_thread", parameterToString(localVarOptionals.OpenContentThread.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublishContent.IsSet() {
		localVarQueryParams.Add("publish_content", parameterToString(localVarOptionals.PublishContent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadCommunity.IsSet() {
		localVarQueryParams.Add("read_community", parameterToString(localVarOptionals.ReadCommunity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadContentSource.IsSet() {
		localVarQueryParams.Add("read_content_source", parameterToString(localVarOptionals.ReadContentSource.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadEvent.IsSet() {
		localVarQueryParams.Add("read_event", parameterToString(localVarOptionals.ReadEvent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadExport.IsSet() {
		localVarQueryParams.Add("read_export", parameterToString(localVarOptionals.ReadExport.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadIdentity.IsSet() {
		localVarQueryParams.Add("read_identity", parameterToString(localVarOptionals.ReadIdentity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadOwnStats.IsSet() {
		localVarQueryParams.Add("read_own_stats", parameterToString(localVarOptionals.ReadOwnStats.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadPresence.IsSet() {
		localVarQueryParams.Add("read_presence", parameterToString(localVarOptionals.ReadPresence.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadStats.IsSet() {
		localVarQueryParams.Add("read_stats", parameterToString(localVarOptionals.ReadStats.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadSurveys.IsSet() {
		localVarQueryParams.Add("read_surveys", parameterToString(localVarOptionals.ReadSurveys.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReadUser.IsSet() {
		localVarQueryParams.Add("read_user", parameterToString(localVarOptionals.ReadUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReceiveTasks.IsSet() {
		localVarQueryParams.Add("receive_tasks", parameterToString(localVarOptionals.ReceiveTasks.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReplyWithAssistant.IsSet() {
		localVarQueryParams.Add("reply_with_assistant", parameterToString(localVarOptionals.ReplyWithAssistant.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchContents.IsSet() {
		localVarQueryParams.Add("search_contents", parameterToString(localVarOptionals.SearchContents.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchEvent.IsSet() {
		localVarQueryParams.Add("search_event", parameterToString(localVarOptionals.SearchEvent.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateCommunity.IsSet() {
		localVarQueryParams.Add("update_community", parameterToString(localVarOptionals.UpdateCommunity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateContentSource.IsSet() {
		localVarQueryParams.Add("update_content_source", parameterToString(localVarOptionals.UpdateContentSource.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateExtension.IsSet() {
		localVarQueryParams.Add("update_extension", parameterToString(localVarOptionals.UpdateExtension.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateIdentity.IsSet() {
		localVarQueryParams.Add("update_identity", parameterToString(localVarOptionals.UpdateIdentity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateIntervention.IsSet() {
		localVarQueryParams.Add("update_intervention", parameterToString(localVarOptionals.UpdateIntervention.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateOwnIntervention.IsSet() {
		localVarQueryParams.Add("update_own_intervention", parameterToString(localVarOptionals.UpdateOwnIntervention.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateSettings.IsSet() {
		localVarQueryParams.Add("update_settings", parameterToString(localVarOptionals.UpdateSettings.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateTimeSheet.IsSet() {
		localVarQueryParams.Add("update_time_sheet", parameterToString(localVarOptionals.UpdateTimeSheet.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdateUser.IsSet() {
		localVarQueryParams.Add("update_user", parameterToString(localVarOptionals.UpdateUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseEmoji.IsSet() {
		localVarQueryParams.Add("use_emoji", parameterToString(localVarOptionals.UseEmoji.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Role
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
