{
  "swagger": "2.0",
  "host": "DOMAIN.api.engagement.dimelo.com",
  "info": {
    "version": "1.0",
    "title": "Engage Digital API",
    "termsOfService": "https://developer.ringcentral.com"
  },
  "basePath": "/1.0",
  "schemes": [
    "https"
  ],
  "tags": [
    {
      "name": "Communities"
    },
    {
      "name": "Folders"
    },
    {
      "name": "Sources"
    },
    {
      "name": "Teams"
    },
    {
      "name": "Users"
    }
  ],
  "paths": {
    "/communities": {
      "get": {
        "tags": [
          "Communities"
        ],
        "summary": "Getting all communities",
        "operationId": "getAllCommunities",
        "description": "This method renders communities ordered by creation date (ascending).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "type": "integer",
            "in": "query",
            "description": "The record index to start. Default value is 0."
          },
          {
            "name": "limit",
            "type": "string",
            "in": "query",
            "description": "The max number of records to return. Default value is 30, max value is 150."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetAllCommunitiesResponse"
            }
          }
        }
      }
    },
    "/communities/{communityId}": {
      "get": {
        "tags": [
          "Communities"
        ],
        "summary": "Getting a community from its id",
        "operationId": "getCommunity",
        "description": "This method renders a community from given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "communityId",
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Community"
            }
          }
        }
      }
    },
    "/content_sources": {
      "get": {
        "tags": [
          "Sources"
        ],
        "summary": "Getting all sources",
        "operationId": "getAllSources",
        "description": "This method renders sources ordered by creation date (ascending).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "type": "integer",
            "in": "query",
            "description": "The record index to start. Default value is 0."
          },
          {
            "name": "limit",
            "type": "string",
            "in": "query",
            "description": "The max number of records to return. Default value is 30, max value is 150."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetAllSourcesResponse"
            }
          }
        }
      }
    },
    "/content_sources/{sourceId}": {
      "get": {
        "tags": [
          "Sources"
        ],
        "summary": "Getting a source from its id",
        "operationId": "getSource",
        "description": "This method renders a source from given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sourceId",
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        }
      }
    },
    "/folders": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Getting all folders",
        "operationId": "getAllFolders",
        "description": "This method renders folders.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "type": "integer",
            "in": "query",
            "description": "The record index to start. Default value is 0."
          },
          {
            "name": "limit",
            "type": "string",
            "in": "query",
            "description": "The max number of records to return. Default value is 30, max value is 150."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetAllFoldersResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Creating a folder",
        "operationId": "createFolder",
        "description": "This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "label",
            "type": "string",
            "in": "query",
            "description": "Folder’s label (mandatory)."
          },
          {
            "name": "parent_id",
            "type": "string",
            "in": "query",
            "description": "ID of the parent folder."
          },
          {
            "name": "position",
            "type": "integer",
            "in": "query",
            "description": "position of the folder. "
          },
          {
            "name": "query",
            "type": "string",
            "in": "query",
            "description": "query of the folder as described in ​Search API documentation.​\\n\\nExample: “​active_and_assigned_to_me:true”"
          },
          {
            "name": "render_threads_count",
            "type": "boolean",
            "in": "query",
            "description": "boolean describing display of the number of threads. "
          },
          {
            "name": "role_restriction[only][]",
            "type": "array",
            "in": "query",
            "description": "list of roles allowed to see this folder. This parameter has to be a hash otherwise it will raise a 400 error. The key should be \"only\". For example: `\u0026role_restriction[only][]=4e5596cdae70f677b5000002`"
          },
          {
            "name": "team_restriction[only][]",
            "type": "array",
            "in": "query",
            "description": "list of teams allowed to see this folder. Same thing as role_restriction: team_restriction parameter has to be a hash with the key \"only\"."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          }
        }
      }
    },
    "/folders/{folderId}": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Getting a folder from its id",
        "operationId": "getFolder",
        "description": "This method renders a folder from given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folderId",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Folders"
        ],
        "summary": "Deleting a folder",
        "operationId": "deleteFolder",
        "description": "This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folderId",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Getting all teams",
        "operationId": "getAllTeams",
        "description": "This method renders teams ordered by creation date (ascending).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "type": "integer",
            "in": "query",
            "description": "The record index to start. Default value is 0."
          },
          {
            "name": "limit",
            "type": "string",
            "in": "query",
            "description": "The max number of records to return. Default value is 30, max value is 150."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetAllTeamsResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Creating a team",
        "operationId": "createTeam",
        "description": "This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "type": "string",
            "in": "query",
            "description": "Team name."
          },
          {
            "name": "leader_ids[]",
            "type": "array",
            "in": "query",
            "description": "List of user id as leaders"
          },
          {
            "name": "user_ids[]",
            "type": "array",
            "in": "query",
            "description": "List of user id as team members."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        }
      }
    },
    "/teams/{teamId}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Getting a team from its id",
        "operationId": "getTeam",
        "description": "This method renders a team from given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "teamId",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Deleting a team",
        "operationId": "deleteTeam",
        "description": "This method destroys an existing team. It renders the team itself. It renders a 404 if id is invalid.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "teamId",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "take_over_category_id",
            "type": "string",
            "in": "query",
            "description": "ID of a category to recategorize (optional)."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Getting all users",
        "operationId": "getAllUsers",
        "description": "This method renders users ordered by creation date (descending).\n\nAuthorization​: only users that can view users. If the user affiliated to the token has the manage_users_of_my_teams permission, only the users belonging to at least one of the teams he’s the leader of will be returned.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "type": "string",
            "in": "query",
            "description": "To filter users on given email."
          },
          {
            "name": "category_id",
            "type": "string",
            "in": "query",
            "description": "To filter users on given category id."
          },
          {
            "name": "identity_id",
            "type": "string",
            "in": "query",
            "description": "To filter users on given identity id."
          },
          {
            "name": "external_id",
            "type": "string",
            "in": "query",
            "description": "To filter users on given external id."
          },
          {
            "name": "role_id",
            "type": "string",
            "in": "query",
            "description": "To filter users on given role id."
          },
          {
            "name": "team_id",
            "type": "string",
            "in": "query",
            "description": "To filter users on given team id."
          },
          {
            "name": "offset",
            "type": "integer",
            "in": "query",
            "description": "The record index to start. Default value is 0."
          },
          {
            "name": "limit",
            "type": "string",
            "in": "query",
            "description": "The max number of records to return. Default value is 30, max value is 150."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetAllTeamsResponse"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Getting a user from its id",
        "operationId": "getUser",
        "description": "This method renders a user from given id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deleting a user",
        "operationId": "deleteUser",
        "description": "This method deletes the given user. In case of success it renders the deleted user, otherwise, it renders an error (422 HTTP code).\n\nAuthorization​: only users that can update users. The user affiliated to the token must have at least all the permissions of the other user. If the user affiliated to the token has the manage_users_of_my_teams permission, the deleted user will need to belong to at least one of the teams he’s the leader of.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Community": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "Folder": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "position": {
          "type": "integer"
        },
        "query": {
          "type": "string"
        },
        "render_threads_count": {
          "type": "boolean"
        },
        "role_restriction": {},
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "GetAllCommunitiesResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "limit": {
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "format": "int32",
          "type": "integer"
        },
        "records": {
          "items": {
            "$ref": "#/definitions/Community"
          },
          "type": "array"
        }
      }
    },
    "GetAllFoldersResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "limit": {
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "format": "int32",
          "type": "integer"
        },
        "records": {
          "items": {
            "$ref": "#/definitions/Folder"
          },
          "type": "array"
        }
      }
    },
    "GetAllSourcesResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "limit": {
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "format": "int32",
          "type": "integer"
        },
        "records": {
          "items": {
            "$ref": "#/definitions/Source"
          },
          "type": "array"
        }
      }
    },
    "GetAllTeamsResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "limit": {
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "format": "int32",
          "type": "integer"
        },
        "records": {
          "items": {
            "$ref": "#/definitions/Team"
          },
          "type": "array"
        }
      }
    },
    "GetAllUsersResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "limit": {
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "format": "int32",
          "type": "integer"
        },
        "records": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array"
        }
      }
    },
    "Restriction": {
      "properties": {
        "only": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "Source": {
      "properties": {
        "active": {
          "description": "Activate/deactivate the source",
          "type": "boolean"
        },
        "auto_detect_content_language": {
          "description": "Auto-detect content language (Boolean)",
          "type": "boolean"
        },
        "channel_id": {
          "type": "string"
        },
        "color": {
          "description": "Color of the icon: Default: 0 Blue: 1 Green: 2 Turquoise: 3 Purple: 4 Yellow: 5 Orange: 6 Red: 7 Asphalt: 8 Grey: 9",
          "format": "int32",
          "type": "integer"
        },
        "community_id": {
          "type": "string"
        },
        "content_archiving": {
          "description": "Automatic archiving of old contents (Boolean)",
          "type": "boolean"
        },
        "content_archiving_period": {
          "description": "Archive contents older than (seconds)",
          "format": "int64",
          "type": "integer"
        },
        "content_languages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "default_category_ids": {
          "description": "Default categories",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "default_content_language": {
          "description": "Default content language",
          "type": "string"
        },
        "error_message": {
          "type": "string"
        },
        "hidden_from_stats": {
          "description": "Hide from statistics",
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "intervention_messages_boost": {
          "description": "Priority boost of messages with intervention",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Source name",
          "type": "string"
        },
        "sla_expired_strategy": {
          "description": "SLA expired strategy (\"max\", \"half\" or \"base\")",
          "type": "string"
        },
        "sla_response": {
          "description": "Response time (seconds)",
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "time_sheet_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "transferred_tasks_boost": {
          "description": "Priority boost of transferred tasks",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "user_thread_default_category_ids": {
          "description": "Default categories (agent messages)",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "Team": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "leader_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "user_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "User": {
      "properties": {
        "category_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "external_id": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "identity_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "invitation_pending": {
          "type": "boolean"
        },
        "lastname": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "rc_user_id": {
          "type": "string"
        },
        "role_id": {
          "type": "string"
        },
        "spoken_languages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "team_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "timezone": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      }
    }
  }
}